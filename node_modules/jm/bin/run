#!/usr/bin/env node

const jm = require('../lib');
const fs = require('fs');
const path = require('path');
const rimraf = require('rimraf');
const fsExtra = require('fs-extra');

function run() {
  let dir = process.cwd(),
    command = process.argv[2];

  if (command === 'send') {
    jm.sendPackage(process.cwd());
    return;
  } else if (command === 'relocate') {
    let target = path.resolve(process.cwd(), process.argv[3]),
      dir = path.resolve(process.cwd(), 'node_modules'),
      names = fs.readdirSync(dir),
      total = names.length,
      moved = 0;
    names.forEach((name) => {
      let source = path.resolve(dir, name),
        dest = path.resolve(target, name);
      if (name.startsWith('@')) {
        move(source, dest);
        return;
      }
      if (fs.existsSync(dest)) {
        try {
          let sourcePk = require(path.resolve(source, 'package.json')),
            destPk = require(path.resolve(dest, 'package.json')),
            sourceVersion = sourcePk.version,
            destVersion = destPk.version;
          if (sourceVersion === destVersion) {
            rimraf(source, () => {});
          } else {
            let versions = [sourceVersion, destVersion].sort(sortVersions),
              version = versions.pop(),
              msg = '';
            console.log('VERSION', { version, sourceVersion, destVersion });
            if (version === sourceVersion) {
              console.log('SOURCE');
              rimraf(dest, () => {
                move(source, dest);
              });
              msg = `${sourceVersion} => ${destVersion}`;
            }
            if (version === destVersion) {
              rimraf(source, () => {});
              msg = `${destVersion} => ${sourceVersion}`;
            }
            console.log(`Moved: ${name} ${msg}`);
          }
        } catch (err) {}
      } else {
        move();
      }
      function move() {
        console.log(`Moving package ${source}...`);
        move(source, dest);
        moved++;
      }
    });
    console.log(`Moved ${moved}/${total}`);
  } else if (command === 'compile') {
    let project = jm.createProject(dir);

    project
      .compile()
      .then('Compiled!')
      .catch((err) => console.log('Error', err));
    return;
  } else if (command === 'publish') {
    require('./publish.js');
  } else {
    console.log(`
USING:
  jm send
  jm compile
  jm publish
    `);
  }
}

function move(source, dest) {
  fsExtra.move(source, dest, (err) => {
    if (err) {
      console.log('MOVE', source, dest);
    }
  });
}

run();

function sortVersions(a, b) {
  let aNumbers = a.split('.').map((n) => +n),
    a1 = aNumbers[0],
    a2 = aNumbers[1],
    a3 = aNumbers[2];
  let bNumbers = b.split('.').map((n) => +n),
    b1 = bNumbers[0],
    b2 = bNumbers[1],
    b3 = bNumbers[2];
  if (a1 > b1) return 1;
  if (a1 < b1) return -1;
  if (a1 === b1) {
    if (a2 > b2) return 1;
    if (a2 < b2) return -1;
    if (a2 === b2) {
      if (a3 > b3) return 1;
      if (a3 < b3) return -1;
    }
  }
  return 0;
}
