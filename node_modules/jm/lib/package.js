'use strict';

const _ = require('ooi/require')('each', 'flatten');
const shell = require('shelljs');
const Packageble = require('./packagable');
const Gittable = require('./gittable');
const fs = require('fs');
const path = require('path');

class Package extends Gittable {
  static hash = {};

  constructor(...args) {
    super(...args);
    this.modulesDir = path.resolve(this.dir, 'node_modules');
    this.parentModulesDir = path.resolve(this.dir, '../node_modules');
    this.count = fs.existsSync(this.modulesDir)
      ? fs.readdirSync(this.modulesDir).length
      : 0;
  }

  get json() {
    let mod = {
      name: this.name,
      version: this.pack.version,
      dir: this.dir,
      count: this.count,
      children: this.getModules().map((mod) => mod.toJSON()),
    };
    this.hashModule(mod);
    return mod;
  }

  getHash() {
    this.toJSON();
    return this.constructor.hash;
  }

  moveModules() {
    let hash = this.getHash();
    _.each(hash, (data, name) => {
      let versions = Object.keys(data).sort((a, b) => {
        let aNumbers = a.split('.').map((n) => +n),
          a1 = aNumbers[0],
          a2 = aNumbers[1],
          a3 = aNumbers[2];
        let bNumbers = b.split('.').map((n) => +n),
          b1 = bNumbers[0],
          b2 = bNumbers[1],
          b3 = bNumbers[2];
        if (a1 > b1) return 1;
        if (a1 < b1) return -1;
        if (a1 === b1) {
          if (a2 > b2) return 1;
          if (a2 < b2) return -1;
          if (a2 === b2) {
            if (a3 > b3) return 1;
            if (a3 < b3) return -1;
          }
        }
        return 0;
      });
      let version = versions.pop(),
        mod = data[version];
      let oldDirname = mod.dir,
        newDirname = path.resolve(this.parentModulesDir, mod.name);
      shell.mkdir('-p', newDirname.split('/').slice(0, -1).join('/'));
      try {
        fs.renameSync(oldDirname, newDirname);
      } catch (err) {
        console.log('ERROR', err, mod);
      }
    });
  }

  hashModule(mod) {
    this.constructor.hash[mod.name] = this.constructor.hash[mod.name] || {};
    this.constructor.hash[mod.name][mod.version] =
      this.constructor.hash[mod.name][mod.version] || mod;
  }

  toJSON() {
    return this.json;
  }

  getModules() {
    let dir = path.resolve(this.dir, 'node_modules');
    if (!fs.existsSync(dir)) return [];
    let packs = _.flatten
      .array(
        fs
          .readdirSync(dir)
          .filter((name) => !name.startsWith('.'))
          .map((name) =>
            name.startsWith('@')
              ? fs
                  .readdirSync(path.resolve(dir, name))
                  .map((file) => `${name}/${file}`)
              : name
          )
      )
      .map((name) => path.resolve(dir, name))
      .map((dir) => new Package(dir));
    return packs;
  }
}

module.exports = Package;
