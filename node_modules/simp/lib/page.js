// External Dependencies
var Class = require('jc');
var _ = require('underscore');
var fs = require('fs');
var jb = require('jb');
var less = require('less');
var path = require('path');

// Internal Dependencies
var Middleware = require('./middleware');

// Shortcuts
var exists = fs.existsSync;
var readFile = fs.readFileSync;
var makeDir = fs.mkdirSync;
var writeFile = fs.writeFileSync;

// Module vars

require('jinjs').registerExtension('.html');

module.exports = Class({
    
    // Interface ===============================================================
    
    init: function (options) {
        var self = this;
        options = options || {};
        if (options.url) {
            self.setURL(options.url);
        }
        self.get = options.get || defaultGet;
        self.post = options.post || defaultPost;
        self.template = options.template || null;
        self.dir = options.dir;
        self.appURL = options.appURL || '';
        self.contextMiddleware = options.contextMiddleware || new Middleware();
        self.name = path.basename(self.dir);
        self.slots = options.slots || {};
        if (options.dir) {
            self.loadFromDir(options.dir);
        }
    },
    
    setURL: function (url) {
        var self = this;
        url = self.appURL + url;
        url = url.replace(/\/\//mg, '/');
        self.url = new RegExp('^' + url + '$', 'mg');
    },
    
    requestGet: function (request, response, callback) {
        var self = this;
        self.get(request, response, function (context) {
            if (typeof context === 'object') {
                if (context.redirect) {
                    response.writeHead(302, {
                        'Location': context.redirect
                    });
                    response.end();
                    return;
                }
                context.request = request;
                self.contextMiddleware.process(context, function (context) {
                    callback(self.template.render(context));
                });
            } else {
                callback(context);
            }
        });
    },
    
    requestPost: function (request, response, callback) {
        var self = this;
        self.post(request, response, function (context) {
            if (typeof context === 'object') {
                if (context.redirect) {
                    response.writeHead(302, {
                        'Location': context.redirect
                    });
                    response.end();
                    return;
                }
                context.request = request;
                self.contextMiddleware.process(context, function (context) {
                    callback(self.template.render(context));
                });
            } else {
                callback(context);
            }
        });
    },
    
    loadFromDir: function (dir) {
        var self = this;
        if (exists(dir + '/page.js')) {
            var mod = require(dir + '/page.js');
            if (mod.url !== undefined) {
                self.setURL(mod.url);
            }
            if (mod.get) {
                self.get = mod.get;
            }
            if (mod.post) {
                self.post = mod.post;
            }
        }
        if (exists(dir + '/template.html')) {
            self.template = require(dir + '/template.html');
        }
        if (exists(dir + '/slots.js')) {
            self.slots = require(dir + '/slots.js');
        }
    },
    
    // Realization =============================================================
    
});

function defaultGet(request, response, callback) {
    callback({});
}

function defaultPost(request, response, callback) {
    callback({});
}

function defaultTemplate() {
    return '';
}