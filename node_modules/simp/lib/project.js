// External Dependencies
var _ = require('underscore');
var fs = require('fs');
var http = require('http');
var connect = require('connect');
var socketio = require('socket.io', {
    rememberTransport: false,
    transports: ['WebSocket',
        'Flash Socket',
        'AJAX long-polling'] });
var Class = require('jc');
var less = require('less');
var jb = require('jb');
var uglify = require("uglify-js");
var jm = require('jm');

// Internal Dependencies
var Application = require('./application');
var simp = require('./index');
var Middleware = require('./middleware');

// Shortcuts
var exists = fs.existsSync;
var readFile = fs.readFileSync;
var makeDir = fs.mkdirSync;
var writeFile = fs.writeFileSync;

// Module vars

module.exports = Class({
    
    // Interface ===============================================================
    
    init: function (options) {
        var self = this;
        options = options || {};
        self.dir = options.dir || process.cwd();
        self.applications = [];
        self.settings = require(self.dir + '/settings.js');
        self.settings.applications = self.settings.applications || [];
        self.staticDir = options.staticDir
            || self.settings.staticDir
            || self.dir + '/static';
        self.middleware = options.middleware || [];
        self.contextMiddleware = options.contextMiddleware || new Middleware();
    },
    
    loadModels: function () {
        var self = this,
            url = self.settings.dbURL || 'mongodb://localhost/test';
        if (!exists(self.dir + '/models')) {
            return;
        }
        var models = jm.loadFromDir(url, self.dir + '/models');
        self.models = models.models;
    },
    
    buildJS: function () {
        var self = this;
        _.each(self.applications, function (app) {
            var code = '',
                appDir = app.dir;
            if (exists(appDir + '/client.js')) {
                code += jb.renderFile(appDir + '/client.js');
            }
            _.each(app.pages, function (page) {
                var pageDir = page.dir;
                if (exists(pageDir + '/client.js')) {
                    var pageCode = jb.renderFile(pageDir + '/client.js');
                    if (self.settings.min) {
                        pageCode = uglify.minify(pageCode, {fromString: true}).code;
                    }
                    writeFile(self.staticDir + '/js/' + app.name + '.' + page.name + '.js', pageCode);
                }
            });
            if (self.settings.min) {
                code = uglify.minify(code, {fromString: true}).code;
            }
            writeFile(self.staticDir + '/js/' + app.name + '.js', code);
        });
    },
    
    buildCSS: function () {
        var self = this;
        _.each(self.applications, function (app) {
            var code = '',
                appDir = app.dir;
            if (exists(appDir + '/styles.less')) {
                code += readFile(appDir + '/styles.less') + '';
            }
            if (exists(appDir + '/styles.css')) {
                code += readFile(appDir + '/styles.css') + '';
            }
            _.each(app.pages, function (page) {
                var pageDir = page.dir;
                if (exists(pageDir + '/styles.less')) {
                    code += readFile(pageDir + '/styles.less') + '';
                }
                if (exists(pageDir + '/styles.css')) {
                    code += readFile(pageDir + '/styles.css') + '';
                }
            });
            var parser = new(less.Parser)({
                filename: self.staticDir + '/css/' + app.name + '.css'
            });

            parser.parse(code, function (e, tree) {
                var options = {};
                if (self.settings.min) {
                    options.compress = true;
                }
                writeFile(self.staticDir + '/css/' + app.name + '.css',
                    tree.toCSS(options));
            });
        });
    },
    
    createStaticDir: function () {
        var self = this;
        if (!exists(self.staticDir)) {
            makeDir(self.staticDir);
        }
        if (!exists(self.staticDir + '/css')) {
            makeDir(self.staticDir + '/css');
        }
        if (!exists(self.staticDir + '/js')) {
            makeDir(self.staticDir + '/js');
        }
    },
    
    load: function () {
        var self = this;
        _.each(self.settings.applications, function (appName) {
            var appDir = self.dir + '/' + appName,
                app = new Application({
                    dir: appDir,
                    contextMiddleware: self.contextMiddleware
                });
            self.applications.push(app);
        });
    },
    
    setServers: function () {
        var self = this,
            connectServer = connect(),
            httpServer = http.createServer(connectServer),
            ioServer = socketio.listen(httpServer);
        ioServer.set('log level', 0);
        self.connectServer = connectServer;
        self.httpServer = httpServer;
        self.ioServer = ioServer;
    },
    
    loadMiddleware: function () {
        var self = this;
        _.each(fs.readdirSync(self.dir + '/middleware'), function (dir) {
            var module = require(self.dir + '/middleware/' + dir);
            if (module.context) {
                self.contextMiddleware.add(module.context);
            }
            if (module.request) {
                self.middleware.push(module.request);
            }
        });
    },
    
    start: function () {
        var self = this,
            port = self.settings.port || 8000;
        self.loadPlugins();
        self.load();
        self.loadMiddleware();
        self.setServers();
        self.setConnectMiddleware();
        self.httpServer.listen(port);
        self.createStaticDir();
        self.buildCSS();
        self.buildJS();
        self.loadModels();
        self.loadSlots();
        console.log('Server listening on port ' + port + '...');
    },
    
    loadSlots: function () {
        var self = this,
            slots = self.getSlots();
        self.ioServer.of('/simp').on('connection', function (socket) {
            socket.on('slot', function (name, request, callback) {
                var handler = slots[name];
                if (!handler) {
                    console.log('Slot "' + name + '" not found!');
                    return;
                }
                if (request.sessionKey) {
                    simp.models.sessions.getUser(request.sessionKey, function (user) {
                        if (user) {
                            request.user = user;
                        }
                        handler(request, callback);
                    });
                } else {
                    handler(request, callback);
                }
            });
        });
    },
    
    loadPlugins: function () {
        var self = this;
        if (!exists(self.dir + '/plugins')) {
            return;
        }
        _.each(fs.readdirSync(self.dir + '/plugins'), function (dir) {
            simp[dir] = require(self.dir + '/plugins/' + dir);
        });
    },
    
    setConnectMiddleware: function () {
        var self = this,
            staticDir = self.settings.staticDir || self.dir + '/static',
            connectServer = self.connectServer;
        connectServer.use(connect.cookieParser());
        connectServer.use(connect.static(staticDir));
        _.each(self.middleware, function (handler) {
            connectServer.use(handler);
        });
        connectServer.use(connect.bodyParser());
        connectServer.use(connect.query());
        connectServer.use(connect.multipart({ uploadDir: self.dir + '/static' }));
        connectServer.use(self.handleHTTPRequest.bind(self));
    },
    
    handleHTTPRequest: function (request, response, next) {
        var self = this,
            url = request.url.split('?')[0],
            handled = false;
        _.each(self.applications, function (app) {
            handlePage(app, url);
        });
        
        function handlePage(app, url) {
            if (app.onlyStaff && !(request.user && request.user.isStaff)) {
                return;
            }
            _.each(app.pages, function (page) {
                if (page.url.test(url)) {
                    if (handled) {
                        return;
                    }
                    handled = true;
                    url.replace(page.url, function () {
                        var args = Array.prototype.slice.call(arguments, 1, -2);
                        request.args = args;
                    });
                    var handler;
                    if (request.method === 'POST') {
                        handler = page.requestPost.bind(page);
                        request.post = request.body;
                    } else {
                        handler = page.requestGet.bind(page);
                        request.get = request.query;
                    }
                    handler(request, response, function (content) {
                        response.writeHead(200, {'Content-Type': 'text/html'});
                        response.end(content);
                    });
                }
            });
        }
        
        if (!handled) {
            response.writeHead(404, {'Content-Type': 'text/html'});
            response.end('Error 404: Page not found!');
        }
    },
    
    getSlots: function () {
        var self = this,
            slots = {};
        _.each(self.applications, function (app) {
            _.each(app.getSlots(), function (handler, name) {
                name = app.name + '.' + name;
                slots[name] = handler;
            });
        });
        return slots;
    },
    
    // Realization =============================================================
    
});